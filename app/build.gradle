buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {        
        classpath 'commons-codec:commons-codec:1.8'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

version = "${SEMVER}".replace("_", ".")

android {
    compileSdkVersion 23
    buildToolsVersion = '23.0.2'

    defaultConfig {
        minSdkVersion 18
    }
}

// Set base variables
ext.JAR_BASE_NAME = "sweetblue_${SEMVER}"
ext.BUNDLE_FOLDER = projectDir.absolutePath + "/" + STAGE + "/" + JAR_BASE_NAME
ext.JAR_DIR = BUNDLE_FOLDER + "/jars"
ext.JAR_NAME = JAR_BASE_NAME + ".jar"
ext.JAVADOC_JAR_NAME = JAR_BASE_NAME + "-javadoc.jar"
ext.SOURCES_JAR_NAME = JAR_BASE_NAME + "-sources.jar"
ext.ANDROID_JAR = System.getenv("ANDROID_HOME") + "/platforms/android-" + ANDROID_API_LEVEL + "/android.jar"
ext.AS_SUFFIX = "/android_studio/app/libs"
ext.ECLIPSE_SUFFIX = "/eclipse/lib"

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    mavenCentral()
}

dependencies {    
    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.4'
}


// Task definitions
task checker(type: Checkstyle) {
    configFile file("../scripts/config/checkstyle/checkstyle.xml")
    source '../src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

// Creates Sweetblue jar
task jar(type: Jar, dependsOn: "compileReleaseSources") {
    from 'build/intermediates/classes/release'
    archiveName = JAR_NAME
    destinationDir = new File(JAR_DIR)
    group = "sweetblue"
    description = "Generates a Sweetblue jar."
}

// Create the source Jar
task sourceJar(type: Jar, dependsOn: jar) {
    archiveName = SOURCES_JAR_NAME
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
    destinationDir = new File(JAR_DIR)
    group = "sweetblue"
    description = "Generates SweetBlue sources jar."
}

// disable the crazy super-strict doclint tool in Java 8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

import org.gradle.logging.internal.OutputEvent
import org.gradle.logging.internal.OutputEventListener

// Generate javadocs
task gendocs(type: Javadoc) {
    String path = rootDir.absolutePath + "/scripts/assets/doc_style.css"
    options.stylesheetFile = new File(path)
    options.windowTitle = "SweetBlue"
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    //exclude '**/backend/**'
    //excludes = ["com.idevicesinc.sweetblue.backend"]
    String home = android.getSdkDirectory().getAbsolutePath()
    options.linksOffline('http://d.android.com/reference', home + '/docs/reference')
    String v = "${SEMVER}"
    version = v.replace("_", '.')
    options.setDocTitle("SweetBlue " + version + " API")
    destinationDir = new File("${BUNDLE_FOLDER}/docs/api")
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    // Check for warnings, and cause build to fail if there are any.
    // This is a temporary solution until a more official solution
    // makes it's way into Gradle.
    def outputEvents = []
            def listener=new OutputEventListener(){
                    void onOutput(OutputEvent event){
                        outputEvents << event
                    }
                };
            doFirst {
                getLogging().addOutputEventListener(listener)
            }
            doLast {
                getLogging().removeOutputEventListener(listener)
                outputEvents.each { e ->
                    if(e.toString() =~ " warning -"){
                        throw new GradleException("You have some javadoc warnings, please fix them!");
                    }
                }
            }
    group = "sweetblue"
}

//task copyJavaDoc(type: Copy, dependsOn: gendocs) {
//    checkDir("${BUNDLE_FOLDER}/docs/api")
//    from "docs/api"
//    into "${BUNDLE_FOLDER}/docs/api"
//}

// Create javadoc jar file
task javadocJar(type: Jar, dependsOn: gendocs) {
    archiveName = JAVADOC_JAR_NAME
    classifier = 'javadoc'
    from gendocs.destinationDir
    destinationDir = new File(JAR_DIR)
    group = "sweetblue"
    description = "Generates the javadoc jar."
}

// Copy the src directory, and Readme file 
task copyFiles << {
    checkDir("${BUNDLE_FOLDER}")
    copy {
        from "src/main/java"
        into "${BUNDLE_FOLDER}/src"
    }
    copy {
        from "../README.md"
        into BUNDLE_FOLDER
    }
    group = "sweetblue"
}

def checkDir(String dir) {
    File f = new File(dir)
    if (!f.exists()) {
        f.mkdirs()
    }
}

// Pull down the samples repo
task getSamples(dependsOn: [jar, sourceJar, javadocJar]) << {
    // If the directory already exists, wipe it out, and start over
    // again, so this doesn't fail the build
    String samplePath = projectDir.absolutePath + "/${STAGE}/samples"
    File f = new File(samplePath)
    if (f.exists()) {
        delete "${samplePath}"
    }

    // When running on the build server, we need to inject the username and password
    // otherwise it will pull the un/pw of the current user.
    String gu = System.getenv("G_UNAME")
    def r;
    if (!gu || !gu.trim()) {
        r = "git clone https://github.com/iDevicesInc/SweetBlue_Samples.git ${samplePath}".execute()
    } else {
        String run = "git clone https://" + System.getenv("G_UNAME") + ":" + System.getenv("G_PW") + "@github.com/iDevicesInc/SweetBlue_Samples.git ${samplePath}"
        r = run.execute()                
    }
    r.waitFor()
    String v = r.exitValue()
    if (!v.equals("0")) {
        throw new RuntimeException(r.errorStream.text)
    }
    group = "sweetblue"
}


ext.mainJar = "${BUNDLE_FOLDER}/jars/${JAR_BASE_NAME}.jar"
ext.sourcesJar = "${BUNDLE_FOLDER}/jars/${JAR_BASE_NAME}-sources.jar"
ext.javadocJar = "${BUNDLE_FOLDER}/jars/${JAR_BASE_NAME}-javadoc.jar"

// Copy the samples to the bundle folder
task copySamples(dependsOn: [copyFiles, getSamples] ) << {
    String d = "${STAGE}/samples/samples"    
    copy {
        from d
        into "${BUNDLE_FOLDER}/samples"
    }
    group = "sweetblue"
}

// Creates a new gradle build task for the input build.gradle file
def buildSampleTask(buildDir) {
    return tasks.create("build${buildDir}SampleTask", GradleBuild) {
        buildFile = "${buildDir}/android_studio/app/build.gradle"
        tasks = ['assemble']
    }
}

// Copy the new sweetblue jar, sourcejar, and javadoc jars to each sample AS
// project, and build 
task copyAndRenameJars(dependsOn: copySamples) << {
    File sampleDir = new File("${BUNDLE_FOLDER}/samples/")    
    FileCollection collection = files { sampleDir.listFiles(new FileFilter() {
    @Override
    public boolean accept(File file) {
        return !file.isHidden();
    }
}) }
    collection.each { File file ->
        copy {
            from mainJar
            into file.getAbsolutePath() + AS_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from mainJar
            into file.getAbsolutePath() + ECLIPSE_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from sourcesJar
            into file.getAbsolutePath() + AS_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from sourcesJar
            into file.getAbsolutePath() + ECLIPSE_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from javadocJar
            into file.getAbsolutePath() + AS_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from javadocJar
            into file.getAbsolutePath() + ECLIPSE_SUFFIX
            rename("_${SEMVER}", "")
        }
        copy {
            from '../local.properties'
            into file.getAbsolutePath() + "/android_studio"
        }
        buildSampleTask(file.getAbsolutePath()).execute()
        delete(file.getAbsolutePath() + "/android_studio/local.properties")
    }
    group = "sweetblue"
}

task copyGPL(dependsOn: copyAndRenameJars) << {
    copy {
        from "../LICENSE"
        into "${BUNDLE_FOLDER}"
    }
    group = "sweetblue"
}

task zipTrial(type: Zip, dependsOn: copyGPL) {
    from "${BUNDLE_FOLDER}"
    archiveName = "sweetblue.zip"
    destinationDir = new File("${STAGE}")
    group = "sweetblue"
}

task zipJar(dependsOn: [zipTrial]) {
    group = "sweetblue"
    description = "Pulls down samples, builds them, and zips up all SweetBlue files."
}

task cleanFolders << {
    delete "${STAGE}/${STANDARD_DIR}", "${STAGE}/${PRO_DIR}", "build"
}

import org.apache.commons.codec.digest.DigestUtils

task updateReadmeVersion << {
    String dver = SEMVER.replace("_", ".")
    File read = new File(rootDir.absolutePath + '/README.md')
    String r = read.getText('UTF-8')
    r = r.replaceFirst('version-.*-blue', "version-${dver}-blue")
    read.write(r, 'UTF-8')
    String hash = DigestUtils.shaHex("${SEMVER}")
    File uuid = new File(projectDir.absolutePath + '/src/main/java/com/idevicesinc/sweetblue/utils/Uuids.java')
    String u = uuid.getText('UTF-8')
    u = u.replaceFirst('BLUETOOTH_CONNECTED_HASH = \".*\"', "BLUETOOTH_CONNECTED_HASH = \"${hash}\"")
    uuid.write(u, 'UTF-8')
    group = "sweetblue"
}

def checkStyleWarningsFile = 'build/reports/checkstyle/checkstyle.xml'

task verifyNoCheckstyleWarnings(type: GradleBuild) {
    doLast {
        File warningsFile = file(checkStyleWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
            throw new GradleException("Checkstyle detected warnings! For more info, check $warningsFile")
        }
    }
    group = "sweetblue"
}

def buildAliases = [
    'bundleNoZip' : ['copyAndRenameJars', 'verifyNoCheckstyleWarnings', 'updateReadmeVersion' ],
    'fullBuild' : [ 'copyAndRenameJars', 'verifyNoCheckstyleWarnings', 'zipJar', 'updateReadmeVersion', 'cleanFolders' ]    
]

task fullBuild(dependsOn: [ copyAndRenameJars, verifyNoCheckstyleWarnings, zipJar, updateReadmeVersion ]) {
    group = "sweetblue"
    description = "Perform full build, and zip up all files for release."
}

def expandedTaskList = []

gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()

ext.ARCHIVA_URL = System.getenv("ARCHIVA_URL")
ext.a_user = System.getenv("ARCHIVA_USER")
ext.a_pw = System.getenv("ARCHIVA_PW")


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = 'com.idevicesinc'
            pom.artifactId = 'sweetblue'

            repository(url: "${ARCHIVA_URL}") {
                authentication(userName: "${a_user}", password: "${a_pw}")
            }

            pom.project {
                name 'SweetBlue'
                packaging 'aar'
                description 'Android Bluetooth (BLE) library'
                url 'http://idevicesinc.com/sweetblue'
            }
        }
    }
}

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {

        allprojects { ext."signing.keyId" = System.getenv("SIGN_ID") }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv("SIGN_RING") }
        allprojects { ext."signing.password" = System.getenv("SIGN_PW") }

    }
}

signing {
    required { /*gradle.taskGraph.hasTask("uploadArchives")*/ true }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

artifacts {
    //archives javadocJar
    archives sourceJar
    //archives new File(JAR_DIR + "/" + JAVADOC_JAR_NAME)

}